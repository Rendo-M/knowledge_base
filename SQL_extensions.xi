SQL extension .
Типы данных в Постгресс .
  Базовые типы .
    |Базовые типы|— это типы, такие как|integer|, которые реализуются ниже уровня языка|SQL|(обычно на низкоуровневом языке, например C). 
    В общих чертах они соответствуют так называемым абстрактным типам данных. Postgres Pro может работать с такими типами только через функции, 
    предоставленные пользователем, и понимать их поведение только в той степени, в какой его опишет пользователь.
    [https://postgrespro.ru/docs/enterprise/15/datatype]
    |Типы-контейнеры| - В Postgres Pro есть три вида «типов-контейнеров», то есть типов, которые могут содержать в себе несколько значений других типов. 
    Это `массивы, составные типы и диапазоны`
      Массивы .
      могут содержать множество значений, имеющих один тип. Тип массива автоматически создаётся для каждого базового и составного типа, 
      диапазона и домена, но не для массивов — массивы массивов не существуют. Для системы типов многомерные массивы не отличаются от одномерных.
      [https://postgrespro.ru/docs/enterprise/15/arrays]
      Составные типы .
      или типы строк, образуются при создании любой таблицы. С помощью команды CREATE TYPE также можно определить «независимый» составной тип, 
      не связанный с таблицей. Составной тип представляет собой просто список типов с определёнными именами полей. Значением составного типа 
      является строка таблицы или запись из значений полей. 
      [https://postgrespro.ru/docs/enterprise/15/rowtypes]
      Диапазонный тип .
      может содержать два значения одного типа, которые определяют нижнюю и верхнюю границу диапазона. 
      Диапазонные типы создаются пользователем, хотя существует и несколько встроенных.
      [https://postgrespro.ru/docs/enterprise/15/rangetypes]
  Домены .
  Домен основывается на определённом нижележащем типе и во многих аспектах взаимозаменяем с ним. 
  Однако домен может иметь ограничения, уменьшающие множество допустимых для него значений относительно нижележащего типа. 
  Домены создаются SQL-командой`CREATE DOMAIN`
  [https://postgrespro.ru/docs/enterprise/15/domains]
  Псевдотипы .
  Для специальных целей существует также несколько «псевдотипов». Псевдотипы нельзя задействовать в столбцах таблицы или в типах-контейнерах, 
  но их можно использовать в объявлениях аргументов и результатов функций. Это даёт возможность выделить в системе типов специальные классы функций.
  [https://postgrespro.ru/docs/enterprise/15/datatype-pseudo#DATATYPE-PSEUDOTYPES-TABLE]
  Полиморфные типы .
  Особый интерес представляет подмножество псевдотипов, полиморфные типы, которые применяются в объявлениях полиморфных функций. Используя такие типы, 
  можно объявить всего одну функцию, которая будет работать с разными типами данных, определяя конкретные типы в зависимости от того, значения каких типов 
  были переданы ей при вызове.
    простые .
    `anyelement`    Указывает, что функция принимает любой тип
    `anyarray`      Указывает, что функция принимает любой тип массива
    `anynonarray`   Указывает, что функция принимает любой тип, отличный от массива
    `anyenum`       Указывает, что функция принимает любой тип-перечисление
    `anyrange`      Указывает, что функция принимает любой диапазонный тип
    `anymultirange` Указывает, что функция принимает любой мультидиапазонный тип          
    общие .
    `anycompatible`           Указывает, что функция принимает любой тип, с автоматическим приведением нескольких аргументов к общему типу
    `anycompatiblearray`      Указывает, что функция принимает любой тип массива, с автоматическим приведением нескольких аргументов к общему типу
    `anycompatiblenonarray`   Указывает, что функция принимает любой тип, отличный от массива, с автоматическим приведением нескольких аргументов к общему типу
    `anycompatiblerange`      Указывает, что функция принимает любой диапазонный тип, с автоматическим приведением нескольких аргументов к общему типу
    `anycompatiblemultirange` Указывает, что функция принимает любой мультидиапазонный тип и может автоматически приводить различные аргументы к общему типу данных
  примеры полиморфных функций [https://postgrespro.ru/docs/enterprise/15/xfunc-sql#XFUNC-SQL-POLYMORPHIC-FUNCTIONS]
    Полиморфные аргументы и результаты связаны друг с другом и сводятся к конкретным типам данным при разборе запроса, вызывающего полиморфную функцию .
  
  Если тип результата функции полиморфный или у неё имеются выходные параметры полиморфных типов, фактические типы этих результатов выводятся 
  из типов полиморфных входных значений следующим образом:
  В каждой позиции (в аргументах или возвращаемом значении), объявленной как`anyelement`, может передаваться любой фактический тип данных, 
  но в каждом конкретном вызове все эти|фактические типы должны быть одинаковыми|. 
  Аналогичным образом, в каждой позиции, объявленной как`anyarray`, может передаваться любой тип данных массива, но |все фактические типы должны совпадать|. 
  Так же и во всех позициях, объявленных как`anyrange`, |должен передаваться одинаковый диапазонный тип|, а в объявленных как `anymultirange` — 
  |одинаковый мультидиапазонный тип|.
  Более того, если некоторые позиции объявлены как `anyarray`, а другие как`anyelement`, то |фактическим типом|в позициях `anyarray` должен быть 
  |массив, элементы которого имеют тот же тип, что и значения в позициях|`anyelement`. 
  Псевдотип `anynonarray`обрабатывается так же, как`anyelement`, но с дополнительным ограничением — фактический тип не должен быть типом массива. 
  Псевдотип`anyenum`тоже обрабатывается как`anyelement`, но его фактические типы ограничиваются перечислениями.
  Таким образом, когда с полиморфным типом объявлено несколько аргументов, в итоге допускаются только определённые комбинации фактических типов. 
| Например, функция, объявленная как equal(anyelement, anyelement), примет в аргументах любые два значения, но только если их типы данных совпадают.
  Когда с полиморфным типом объявлено возвращаемое значение функции, так же полиморфным должен быть минимум один аргумент, и фактический тип результата 
  при конкретном вызове определится по типу фактически переданного полиморфного аргумента (или аргументов)
  |Для «общего» семейства полиморфных типов|работают примерно те же правила совмещения и выведения типов, что и для «простого» семейства, но есть одно 
  важно отличие: |фактические типы аргументов не должны совпадать, если они могут быть неявно приведены к некоторому общему типу|
  | CREATE FUNCTION myfunc(a anyelement, b anyelement,
  |                    c anycompatible, d anycompatible)
  | RETURNS anycompatible AS ...
  Когда эта функция вызывается, первые два аргумента обязательно должны иметь один и тот же тип. Последние два аргумента должны быть приводимыми к общему типу, 
  причём этот тип может не совпадать с типом первых двух аргументов. Этот общий тип станет типом результата.

Пользовательские функции .
  В Postgres Pro представлены функции четырёх видов: .
    # функции на языке запросов
    # функции на процедурных языках (функции, написанные, например, на PL/pgSQL или PL/Tcl)
    # внутренние функции
    # функции на языке C
    Функции любых видов могут принимать в качестве аргументов (параметров) базовые типы, составные типы или их сочетания. 
    Кроме того, любые функции могут возвращать значения базового или составного типа. 
    Также можно определить функции, возвращающие наборы базовых или составных значений.
    Функции многих видов могут также принимать или возвращать определённые псевдотипы (например, полиморфные типы), 
    но доступные средства для работы с ними различаются.

        
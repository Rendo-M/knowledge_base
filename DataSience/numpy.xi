Библиотека numpy .
  библиотека с открытым исходным кодом для`Python`реализующая
  множество математических операций для работы с векторами, 
  матрицами и массивами. Важное преимущество`Numpy`перед собственной
  реализацией массивов (например на списках) - это векторные операции,
  которые происходят гораздо быстрее, последовательных.
 `Numpy`лежит в основе других важных библиотек:`Pandas`(работа с 
  табличными данными),`SciPy`(работы с методами оптимизации и научными
  расчётами),`Matplotlib`(построение графиков) и т.д.

  import numpy as np .
    a = np.array(lst) .
    создает numpy массив.
    a = np.zeros((2, 3)) .
    создает массив 2x3 заполненный`0`
    b = np.ones((3, 2)) .
    создает массив 3x2 заполненный`1`
    b = np.zeros_like(a) .
    b = np.ones_like(a) .
    создает массив`b`размерности`a`и заполняет его`0`или`1`
    a = np.eye(3) .
    квадратный массив нулей с единицами на главной диагонали
    a = np.arange(Start, Stop, Step) .
    массив чисел начиная`[Start, Stop)` с шагом`Step` 
    b= a.astype(str) .
    привести массив к указанному типу
      Доступные типы: .
 |    np.sctypes = 
 |  {'int': [numpy.int8, numpy.int16, numpy.int32, numpy.int64],
 |  'uint': [numpy.uint8, numpy.uint16, numpy.uint32, numpy.uint64],
 |  'float': [numpy.float16, numpy.float32, numpy.float64, numpy.float128],
 |  'complex': [numpy.complex64, numpy.complex128, numpy.complex256],
 |  'others': [bool, object, bytes, str, numpy.void]}
    Доступ к элементам массива:
    | a[1][1] === a[1,1]
    также можно обратиться к строке:`a[1]`
    можно использовать срезы и даже списки индексов:
    | a = np.arange(5)
    | a[[0, 1, -1]]
    | array([0, 1, 4])
    также реализована возможность доступа ко множеству элементов массива
    через булев индексный массив. Индексный массив должен совпадать 
    по форме с индексируемым:
   | a = np.array([[1, 2, 3], [4, 5, 6]])
   | i = np.array([[False, False, True], [ True, False, True]])
   | a[i]
   | Out:
   | array([3, 4, 6])
    Над индексирующими булевыми массивами определены логические операции
   `and or not`выполняющие логические операции И, ИЛИ и НЕ поэлементно.
    a.ravel() .
    преобразует массив в одноменрный (меняется его представление)
    a.reshape(*args) .
    представляет массив в виде массива размерности *args 
    важно чтобы количество элементов сохранилось
  Атрибуты: .
    .size .
    количество элементов массива
    .ndim .
    размерность массива
    .shape .
    кортеж с размерами массива

  Транспонирование матрицы: взаимозамена строк и столбцов .
    B = A.T .
    np.transpose(A) .
    инвертирует порядок осей.
    np.swapaxes() .
    меняет местами две оси, указанные в параметрах

  Объединение массивов .
    Объединяемые массивы должны иметь одинаковое количество осей.
    Объединять массивы можно с образованием новой оси,
    либо вдоль уже существующей.
    Для объединения с образованием новой оси исходные массивы 
   должны иметь одинаковые размеры вдоль всех осей  
    np.stack((A, B, C)) .
    объединяет массивы`A B C`в новый массив, с образованием новой оси.
   Для объединения массивов вдоль существующей оси, они должны 
   иметь одинаковый размер по всем осям, кроме выбранной для 
   объединения, а по ней могут иметь произвольные размеры:
    C = np.concatenate((A, B), 1) .
    объединяет массивы`А`и`В`в массив`С`вдоль оси`1`
    np.vstack((A, B)) .
    np.hstack((A, B)) .
    Объединение массивов`А`и`В`по первой или второй оси соответсвенно.
    Массивы для объединения передаются кортежем.

  Клонирование данных .
    np.repeat(A, n) .
    вернет одномерный массив с элементами массива`A`, каждый из которых
    будет повторен`n`раз.
    Этот вариант отличается от объединения массива с самим собой 
    оператором stack только положением оси, вдоль которой стоят
    одинаковые данные. В случае repeat() это последняя ось, если
    использовать stack — первая

  Математические операции над элементами массива .
    Если`A`и`B`массивы одинакового размера, то их можно складывать,
    умножать, вычитать, делить и возводить в степень. 
    Эти операции выполняются поэлементно, результирующий массив будет
    совпадать по геометрии с исходными массивами, а каждый его элемент
    будет результатом выполнения соответствующей операции над парой 
    элементов из исходных массивов  
    Также для действий с массивами реализованы функции логарифма, 
    экспоненты, синуса, тангенса и тд. 

  Матричное умножение .
    с = dot(a, b) .
    умножение по правилам линейной алгебры 
    векторное, скалярное, матричное - в зависимости от операндов
    Для выполнения операций должны совпадать соответсвующие размеры
    тензоров/векторов.

  Агрегаторы .
    методы`NumPy`позволяющие заменять данные интегральными 
    характеристиками вдоль некоторых осей. Например, можно 
    посчитать среднее значение, максимальное, минимальное, 
    вариацию или еще какую-то характеристику вдоль какой-либо 
    оси или осей и сформировать из этих данных новый массив. 
    Форма нового массива будет содержать все оси исходного массива, 
    кроме тех, вдоль которых подсчитывался агрегатор.

    np.min(a, 0) .
    минимум среди элементов массива`a`вдоль оси`0`
    np.max(a, 0) .
    максимум среди элементов массива`a`вдоль оси`0`
    np.mean(a, 0) .
    среднее арифметическое среди элементов массива`a`вдоль оси`0`
    np.average(a, 0) .
    средневзвешенное значение среди элементов массива`a`вдоль оси`0`
    Список агрегаторов выглядит примерно так:
      сумма: .
        sum и nansum .
      произведение: .
        prod и nanprod .
      среднее и матожидание: .
        average и mean (nanmean), nanaverage нет .
      медиана: .
        median и nanmedian .
      перцентиль: .
        percentile и nanpercentile .
      вариация: .
        var и nanvar .
      стандартное отклонение (квадратный корень из вариации): .
        std и nanstd .
      минимальное значение: .
        min и nanmin .
      максимальное значение: .
        max и nanmax .
      индекс элемента, имеющего минимальное значение: .
        argmin и nanargmin .
      индекс элемента, имеющего максимальное значение: .
        argmax и nanargmax .
    Если не указать оси, то по умолчанию все 
    рассматриваемые характеристики считаются 
    по всему массиву.    
    агрегирующие методы определены не только 
    как методы модуля`NumPy`, но и для самих 
    массивов: запись`np.aggregator(A, axes)` 
    эквивалентна записи`A.aggregator(axes)` 
    где под`aggregator`подразумевается одна 
    из рассмотренных выше функций, а под`axes`— 
    индексы осей.
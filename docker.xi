Setup Docker .
 - скачать скрипт и выполнить скрипт по инструкции: https://docs.docker.com/engine/install/ubuntu/

  service docker status .
    проверить работает ли докер


  ФЛАГИ .
    --version .
    --rm .
    удалить контейнер после остановки
    -d .
    запуск контейнера в фоне 
    --name .
    задать имя контейнера
    -e .
    передача переменной среды в контейнер
    

  Команды .
    run <image:tag> .
    создать и запустить новый контейнер
    ps .
    показать процессы
    rm <containerID, ...> .
    удалить контейнер 
    rmi .
    удалить образ
    images .
    посмотреть скачаные образы
    pull <imagename> .
    скачать образ
    start .
    Запустить уже существующий контейнер
    pause\unpause .
    пауза\снять с паузы
    stop .
    остановить контейнер
    kill .
    убить контейнер("снять задачу")
    exec .
    зайти в работающий контейнер (/bin/bash)
    system prune -a --volumes .
    удалить все остановленные контейнеры и их образы 
    inspect <containerID> .
       посмотреть информацию о контейнере



  в контейнер можно передать команду .
    | docker run --name FirstCont ubuntu:20.04 ls|echo "hello" 

  Проброс портов (port mapping) .
    -p xx:xx .
    порт 80 пробрасывается с сервера в  докер
    таким образом мы извне можем подключиться к контейнеру 
    информацию о том, какие порты пробрасывать можно посмотреть на докерхаб в описании образа


  Docker Volumes(постоянные данные) .
    host volumes: .
    | docker run -v /opt/mysql_data:/var/lib/mysql mysql
     путь к директории на сервере: /opt/mysql_data
     путь к директории в контейнере /var/lib/mysql

    anonymus volumes: .
    | docker run -v /var/lib/mysql mysql
     путь к директории в контейнере /var/lib/mysql
     путь к директории в на сервере /var/lib/docker/volumes/<HASH>/_data 
    |том удаляется после удаления котейнера!|
    named volumes .
    |  docker run -v mysql_data:/var/lib/mysql mysql
     путь к директории в контейнере /var/lib/mysql
     путь к директории в на сервере /var/lib/docker/volumes/mysql_data/_data 

    | docker volume ls
    посмотреть список томов 
    | docker volume create <name>
    создать том с именем`name`
     | docker volume rm <name>
    удалить том с именем`name`

    docker network .
    ! Docker  по умолчанию предоставляет набор из 3 сетей. 

    ! при запуске контейнера по умолчанию он попадает в сеть `bridge`
    эти контейнеры имеют доступ наружу, в сеть. 
    | docker0: 172.17.0.0/16 
    и чтобы подключиться снаружи к нему, нужно создать мост (пробросить порт) с помощью флага `-p 80:80`

    ! чтобы запустить контейнер в сети host:
    | docker run nginx --network=host
    тогда контейнеры получают ip адрес хоста, 
    у них также есть доступ наружу, 
    чтобы к ним подключиться не нужно пробрасывать порты, достаточно указать ip адрес и порт
    ! чтобы запустить контейнер в сети none:
    | docker run nginx --network=none
    в этом случае у него нет ip адреса и подключиться к нему по ip через порт не получится.
    Можно создать дополнительное сети`macvlan`,`ipvlan`и`overlay`
    
    ! создать контейнер в кластере swarm (перед этим надо создать тип сети overlay):
    | docker run nginx --network=overlay
    сейчас почти не используется, тк есть кубернетис.

      bridge .
      - контейнеры в этой сети могут общаться между собой по внутренним ip адресам, но не по DNS именам 
      | docker  

    
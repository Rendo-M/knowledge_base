BeautifulSoup .
    Помогает разбирать полученную веб страницу анализируя ее DOM дерево и обращаясь к тегам и атриубутам получать оттуда информацию.
    Пример работы с BS: .
        | from bs4 import BeautifulSoup
        | soup = BeautifulSoup(src, 'lxml')     
        из кода html содали объект бьютифулсуп, из которого будем извлекать информацию
        | title = soup.title

    методы объекта BS:
    .find(tag, class_=classname) .
    получить первый элемента обрамленного тегом `tag` возвращается объект BS с которым можно продолжить работу, углубляясь в дерево элементов.
    .findall(tag, class_=class_name) .
    соберет все элементы `tag` и вернет список оъектов BS
    поиск можно конкретизировать указывая доп параметры, например класс `classname` а также любые атрибуты, передавая их в виде словаря аттрибут: значение
    .text .
    получить текст из тега в объекте BS
    .get() .
    получить значение атрибута (также можно обращаться к атрибуту по его названию как по ключу словаря)
    .findparent() .
    наоборот служат для того, чтобы подняться вверх по дереву элементов DOM находя родительский класс
    .findparents() .
    поднимается вверх до конца, можно ставить ограничение указывая количество шагов и/или html tag
    .next_element() .
    .find_next() .
    возвращает следующий элемент в коде
    | soup.find(class_='tile').next_element().next_element().text
    `find_next()` вернет сразу следующий элемент, пропуская переводы строки в html коде между тегами и тд.
    .previous_element() .
    аналог `next_element()` работающий снизу вверх
    .find_next_sibling() .
    .find_previous_sibling() .
    ищут следующий и предыдущий элементы внутри искомого тега
    все методы имеют и множественное число, и возвращают список

